/* -LICENSE-START-
** Copyright (c) 2011 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
** 
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

#import "SwitcherPanelAppDelegate.h"
#include <libkern/OSAtomic.h>
#include <string>

static inline bool	operator== (const REFIID& iid1, const REFIID& iid2)
{ 
	return CFEqual(&iid1, &iid2);
}

// Callback class for monitoring property changes on a mix effect block.
class MixEffectBlockMonitor : public IBMDSwitcherMixEffectBlockCallback
{
public:
	MixEffectBlockMonitor(SwitcherPanelAppDelegate* uiDelegate) : mUiDelegate(uiDelegate), mRefCount(1) { }

protected:
	virtual ~MixEffectBlockMonitor() { }

public:
	HRESULT STDMETHODCALLTYPE QueryInterface(REFIID iid, LPVOID *ppv)
	{
		if (!ppv)
			return E_POINTER;
		
		if (iid == IID_IBMDSwitcherMixEffectBlockCallback)
		{
			*ppv = static_cast<IBMDSwitcherMixEffectBlockCallback*>(this);
			AddRef();
			return S_OK;
		}
		
		if (CFEqual(&iid, IUnknownUUID))
		{
			*ppv = static_cast<IUnknown*>(this);
			AddRef();
			return S_OK;
		}
		
		*ppv = NULL;
		return E_NOINTERFACE;
	}

	ULONG STDMETHODCALLTYPE AddRef(void)
	{
		return ::OSAtomicIncrement32(&mRefCount);
	}

	ULONG STDMETHODCALLTYPE Release(void)
	{
		int newCount = ::OSAtomicDecrement32(&mRefCount);
		if (newCount == 0)
			delete this;
		return newCount;
	}
	
	HRESULT PropertyChanged(BMDSwitcherMixEffectBlockPropertyId propertyId)
	{
		switch (propertyId)
		{
			case bmdSwitcherMixEffectBlockPropertyIdTransitionFramesRemaining:
				[mUiDelegate performSelectorOnMainThread:@selector(updateTransitionFramesTextField) withObject:nil waitUntilDone:YES];
				break;
			default:	// ignore other property changes not used for this sample app
				break;
		}
		return S_OK;
	}

private:
	SwitcherPanelAppDelegate*		mUiDelegate;
	int								mRefCount;
};

// Monitor the properties on Switcher Inputs.
// In this sample app we're only interested in changes to the Long Name property to update the PopupButton list
class InputMonitor : public IBMDSwitcherInputCallback
{
public:
	InputMonitor(IBMDSwitcherInput* input, SwitcherPanelAppDelegate* uiDelegate) : mInput(input), mUiDelegate(uiDelegate), mRefCount(1)
	{
		mInput->AddRef();
		mInput->AddCallback(this);
        mInput->GetInputId(&inputID);
        if (inputID < MAXTALLY) {
            mInput->GetFlag(bmdSwitcherInputPropertyIdIsProgramTallied, &mUiDelegate->tallyValue[inputID]);
        }
	}

protected:
	~InputMonitor()
	{
		mInput->RemoveCallback(this);
		mInput->Release();
	}
	
public:
	// IBMDSwitcherInputCallback interface
	HRESULT STDMETHODCALLTYPE QueryInterface(REFIID iid, LPVOID *ppv)
	{
		if (!ppv)
			return E_POINTER;
		
		if (iid == IID_IBMDSwitcherInputCallback)
		{
			*ppv = static_cast<IBMDSwitcherInputCallback*>(this);
			AddRef();
			return S_OK;
		}
		
		if (CFEqual(&iid, IUnknownUUID))
		{
			*ppv = static_cast<IUnknown*>(this);
			AddRef();
			return S_OK;
		}
		
		*ppv = NULL;
		return E_NOINTERFACE;
	}

	ULONG STDMETHODCALLTYPE AddRef(void)
	{
		return ::OSAtomicIncrement32(&mRefCount);
	}

	ULONG STDMETHODCALLTYPE Release(void)
	{
		int newCount = ::OSAtomicDecrement32(&mRefCount);
		if (newCount == 0)
			delete this;
		return newCount;
	}

	HRESULT PropertyChanged(BMDSwitcherInputPropertyId propertyId)
	{
		switch (propertyId)
		{
			case bmdSwitcherInputPropertyIdLongName:
				[mUiDelegate performSelectorOnMainThread:@selector(updatePopupButtonItems) withObject:nil waitUntilDone:YES];
                break;
            case bmdSwitcherInputPropertyIdIsProgramTallied:
                if (inputID < MAXTALLY) {
                    mInput->GetFlag(bmdSwitcherInputPropertyIdIsProgramTallied, &mUiDelegate->tallyValue[inputID]);
                }
                [mUiDelegate performSelectorOnMainThread:@selector(updateTally) withObject:nil waitUntilDone:YES];
                break;
			default:	// ignore other property changes not used for this sample app
				break;
		}
		
		return S_OK;
	}
	IBMDSwitcherInput* input() { return mInput; }
	
private:
	IBMDSwitcherInput*			mInput;
    BMDSwitcherInputId          inputID;
	SwitcherPanelAppDelegate*	mUiDelegate;
	int							mRefCount;
};

// Callback class to monitor switcher disconnection
class SwitcherMonitor : public IBMDSwitcherCallback
{
public:
	SwitcherMonitor(SwitcherPanelAppDelegate* uiDelegate) :	mUiDelegate(uiDelegate), mRefCount(1) { }

protected:
	virtual ~SwitcherMonitor() { }
	
public:
	// IBMDSwitcherCallback interface
	HRESULT STDMETHODCALLTYPE QueryInterface(REFIID iid, LPVOID *ppv)
	{
		if (!ppv)
			return E_POINTER;
		
		if (iid == IID_IBMDSwitcherCallback)
		{
			*ppv = static_cast<IBMDSwitcherCallback*>(this);
			AddRef();
			return S_OK;
		}
		
		if (CFEqual(&iid, IUnknownUUID))
		{
			*ppv = static_cast<IUnknown*>(this);
			AddRef();
			return S_OK;
		}
		
		*ppv = NULL;
		return E_NOINTERFACE;
	}

	ULONG STDMETHODCALLTYPE AddRef(void)
	{
		return ::OSAtomicIncrement32(&mRefCount);
	}

	ULONG STDMETHODCALLTYPE Release(void)
	{
		int newCount = ::OSAtomicDecrement32(&mRefCount);
		if (newCount == 0)
			delete this;
		return newCount;
	}
	
	// Switcher events ignored by this sample app
	HRESULT STDMETHODCALLTYPE	Notify(BMDSwitcherEventType eventType) { return S_OK; }
	
	HRESULT STDMETHODCALLTYPE	Disconnected(void)
	{
		[mUiDelegate performSelectorOnMainThread:@selector(switcherDisconnected) withObject:nil waitUntilDone:YES];
		return S_OK;
	}
	
private:
	SwitcherPanelAppDelegate*	mUiDelegate;
	int							mRefCount;
};


@implementation SwitcherPanelAppDelegate

@synthesize window;

- (void)applicationDidFinishLaunching:(NSNotification *)aNotification
{
	mSwitcherDiscovery = NULL;
	mSwitcher = NULL;
	mMixEffectBlock = NULL;
	
	mSwitcherMonitor = new SwitcherMonitor(self);
	mMixEffectBlockMonitor = new MixEffectBlockMonitor(self);
	
	mMoveSliderDownwards = false;
	mCurrentTransitionReachedHalfway = false;
	
	mSwitcherDiscovery = CreateBMDSwitcherDiscoveryInstance();
	if (! mSwitcherDiscovery)
	{
		NSBeginAlertSheet(@"Could not create Switcher Discovery Instance.\nATEM Switcher Software may not be installed.\n",
							@"OK", nil, nil, window, self, @selector(sheetDidEndShouldTerminate:returnCode:contextInfo:), NULL, window, @"");
	}
	
	[self switcherDisconnected];		// start with switcher disconnected
}

- (void)applicationWillTerminate:(NSNotification*)aNotification
{
	mSwitcherMonitor->Release();
	mSwitcherMonitor = NULL;
	
	mMixEffectBlockMonitor->Release();
	mMixEffectBlockMonitor = NULL;

	if (mSwitcherDiscovery)
	{
		mSwitcherDiscovery->Release();
		mSwitcherDiscovery = NULL;
	}
}

- (BOOL)applicationShouldTerminateAfterLastWindowClosed:(NSApplication*)sender
{
	return YES;
}

- (void)sheetDidEndShouldTerminate:(NSWindow *)sheet returnCode:(NSInteger)returnCode contextInfo:(void *)contextInfo
{
	[NSApp terminate:self];
}

//
// Actions
//
- (IBAction)connectButtonPressed:(id)sender
{
	NSString* address = [mAddressTextField stringValue];
	
	BMDSwitcherConnectToFailure			failReason;
	
	// Note that ConnectTo() can take several seconds to return, both for success or failure,
	// depending upon hostname resolution and network response times, so it may be best to
	// do this in a separate thread to prevent the main GUI thread blocking.
	HRESULT hr = mSwitcherDiscovery->ConnectTo((CFStringRef)address, &mSwitcher, &failReason);
	if (SUCCEEDED(hr))
	{
		[self switcherConnected];
	}
	else
	{
		NSString* reason;
		switch (failReason)
		{
			case bmdSwitcherConnectToFailureNoResponse:
				reason = @"No response from Switcher";
				break;
			case bmdSwitcherConnectToFailureIncompatibleFirmware:
				reason = @"Switcher has incompatible firmware";
				break;
			default:
				reason = @"Connection failed for unknown reason";
		}
		NSBeginAlertSheet(reason, @"OK", nil, nil, window, self, NULL, NULL, window, @"");
	}
}

- (void)switcherConnected
{
	HRESULT result;
	IBMDSwitcherMixEffectBlockIterator* iterator = NULL;
	IBMDSwitcherInputIterator* inputIterator = NULL;
	
	[mConnectButton setEnabled:NO];			// disable Connect button while connected
	
	mSwitcher->AddCallback(mSwitcherMonitor);
	
	// Create an InputMonitor for each input so we can catch any changes to input names
	result = mSwitcher->CreateIterator(IID_IBMDSwitcherInputIterator, (void**)&inputIterator);
	if (SUCCEEDED(result))
	{
		IBMDSwitcherInput* input = NULL;
		
		// For every input, install a callback to monitor property changes on the input
		while (S_OK == inputIterator->Next(&input))
		{
			InputMonitor* inputMonitor = new InputMonitor(input, self);
			input->Release();
			mInputMonitors.push_back(inputMonitor);
		}
		inputIterator->Release();
		inputIterator = NULL;
	}
		
	// Get the mix effect block iterator
	result = mSwitcher->CreateIterator(IID_IBMDSwitcherMixEffectBlockIterator, (void**)&iterator);
	if (FAILED(result))
	{
		NSLog(@"Could not create IBMDSwitcherMixEffectBlockIterator iterator");
		goto finish;
	}
	
	// Use the first Mix Effect Block
	if (S_OK != iterator->Next(&mMixEffectBlock))
	{
		NSLog(@"Could not get the first IBMDSwitcherMixEffectBlock");
		goto finish;
	}
	
	mMixEffectBlock->AddCallback(mMixEffectBlockMonitor);
	
	[self mixEffectBlockBoxSetEnabled:YES];
	[self updateTransitionFramesTextField];
	
finish:
	if (iterator)
		iterator->Release();
}

- (void)switcherDisconnected
{
	[mConnectButton setEnabled:YES];			// enable connect button so user can re-connect
	
	[self mixEffectBlockBoxSetEnabled:NO];
	
	// cleanup resources created when switcher was connected
	for (std::list<InputMonitor*>::iterator it = mInputMonitors.begin(); it != mInputMonitors.end(); ++it)
	{
		(*it)->Release();
	}
	mInputMonitors.clear();
	
	if (mMixEffectBlock)
	{
		mMixEffectBlock->RemoveCallback(mMixEffectBlockMonitor);
		mMixEffectBlock->Release();
		mMixEffectBlock = NULL;
	}
	
	if (mSwitcher)
	{
		mSwitcher->RemoveCallback(mSwitcherMonitor);
		mSwitcher->Release();
		mSwitcher = NULL;
	}
}

- (void)updateTally
{
    [tally1 setEnabled:tallyValue[1]];
    [tally2 setEnabled:tallyValue[2]];
    [tally3 setEnabled:tallyValue[3]];
}

- (void)mixEffectBlockBoxSetEnabled:(bool)enabled
{
    [mTransitionFramesTextField setEnabled:enabled];
    [self updateTally];
}

- (void)updateTransitionFramesTextField
{
    int64_t framesRemaining;
    mMixEffectBlock->GetInt(bmdSwitcherMixEffectBlockPropertyIdTransitionFramesRemaining, &framesRemaining);
    [mTransitionFramesTextField setIntegerValue:framesRemaining];
}


- (IBAction)frames5:(id)sender {
    IBMDSwitcherTransitionMixParameters *mTransitionMixParams = NULL;
    HRESULT res = mMixEffectBlock->QueryInterface(IID_IBMDSwitcherTransitionMixParameters, (void**)&mTransitionMixParams);
    NSLog(@"res = %d\n", res);
    mTransitionMixParams->SetRate(5);
}

- (IBAction)frames10:(id)sender {
    IBMDSwitcherTransitionMixParameters *mTransitionMixParams = NULL;
    HRESULT res = mMixEffectBlock->QueryInterface(IID_IBMDSwitcherTransitionMixParameters, (void**)&mTransitionMixParams);
    NSLog(@"res = %d\n", res);
    mTransitionMixParams->SetRate(10);
}

@end
